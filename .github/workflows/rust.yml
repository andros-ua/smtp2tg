name: Build and Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        include:
          # x86_64 Linux
          - target: x86_64-linux
            rust_target: x86_64-unknown-linux-gnu
            artifact_name: smtp2tg-x86_64-linux
            binary_name: smtp2tg

          # ARM64 Linux
          - target: arm64-linux
            rust_target: aarch64-unknown-linux-gnu
            artifact_name: smtp2tg-arm64-linux
            binary_name: smtp2tg
            cross_compile: true

          # Windows
          - target: x86_64-windows
            rust_target: x86_64-pc-windows-msvc
            artifact_name: smtp2tg-x86_64-windows
            binary_name: smtp2tg.exe
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Setup ARM64 toolchain
        if: matrix.cross_compile
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Build Linux binaries
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.rust_target }}
          mkdir -p release
          cp target/${{ matrix.rust_target }}/release/${{ matrix.binary_name }} release/

      - name: Build Windows binary
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo build --release --target ${{ matrix.rust_target }}
          mkdir -p release
          cp target/${{ matrix.rust_target }}/release/${{ matrix.binary_name }} release/

      - name: Create checksums
        shell: bash
        run: |
          cd release
          sha256sum ${{ matrix.binary_name }} | awk '{print $1 "  " $2}' > ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            release/${{ matrix.binary_name }}
            release/${{ matrix.artifact_name }}.sha256
          retention-days: 1

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifact_downloads
          pattern: smtp2tg-*
          merge-multiple: false

      - name: Prepare release assets
        shell: bash
        run: |
          # Create clean output directory
          mkdir -p release_assets
          
          # Process each downloaded artifact
          for artifact_dir in artifact_downloads/*/; do
            echo "Processing artifact: $artifact_dir"
            
            # Extract platform from directory name
            if [[ "$artifact_dir" == *"x86_64-linux"* ]]; then
              platform="x86_64-linux"
              binary_name="smtp2tg"
            elif [[ "$artifact_dir" == *"arm64-linux"* ]]; then
              platform="arm64-linux"
              binary_name="smtp2tg"
            elif [[ "$artifact_dir" == *"x86_64-windows"* ]]; then
              platform="x86_64-windows"
              binary_name="smtp2tg.exe"
            else
              echo "Unknown artifact type: $artifact_dir"
              exit 1
            fi
          
            # Find and copy the binary
            find "$artifact_dir" -type f \( -name "$binary_name" -o -name "smtp2tg" -o -name "smtp2tg.exe" \) -exec cp {} "release_assets/smtp2tg-$platform" \;
            
            # Find and fix the checksum file
            find "$artifact_dir" -type f -name "*.sha256" -exec sh -c '
              platform="$1"
              src_file="$2"
              dest_dir="$3"
              # Extract the hash and create new checksum file with correct filename
              awk "{print \$1 \"  smtp2tg-$platform\"}" "$src_file" > "$dest_dir/smtp2tg-$platform.sha256"
            ' sh "$platform" {} "release_assets" \;
          done
          
          # Compress binaries
          cd release_assets
          tar -czvf smtp2tg-x86_64-linux.tar.gz smtp2tg-x86_64-linux
          tar -czvf smtp2tg-arm64-linux.tar.gz smtp2tg-arm64-linux
          zip -0 smtp2tg-x86_64-windows.zip smtp2tg-x86_64-windows
          
          # Verify files
          echo "Final release assets:"
          ls -lh
          
          # Verify checksums by creating temporary copies with expected names
          mkdir -p verify_temp
          for platform in x86_64-linux arm64-linux x86_64-windows; do
            if [ -f "smtp2tg-$platform" ]; then
              cp "smtp2tg-$platform" "verify_temp/smtp2tg${platform##*-}"
              # Fix Windows executable name
              if [ "$platform" = "x86_64-windows" ]; then
                mv "verify_temp/smtp2tg${platform##*-}" "verify_temp/smtp2tg.exe"
              fi
              # Create checksum file with simple name
              awk '{print $1}' "smtp2tg-$platform.sha256" > "verify_temp/smtp2tg${platform##*-}.sha256"
            fi
          done
          
          echo "Checksum verification:"
          (cd verify_temp && sha256sum -c *.sha256)
          
          # Clean up verification files
          rm -rf verify_temp
          
          # Prepare release notes content
          echo "CHECKSUMS<<EOF" >> $GITHUB_ENV
          cat *.sha256 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            Pre-built binaries for ${{ github.ref_name }}

            SHA256 Checksums:
            ```
            ${{ env.CHECKSUMS }}
            ```
          files: |
            release_assets/smtp2tg-x86_64-linux.tar.gz
            release_assets/smtp2tg-x86_64-linux.sha256
            release_assets/smtp2tg-arm64-linux.tar.gz
            release_assets/smtp2tg-arm64-linux.sha256
            release_assets/smtp2tg-x86_64-windows.zip
            release_assets/smtp2tg-x86_64-windows.sha256
          draft: false
          prerelease: false
