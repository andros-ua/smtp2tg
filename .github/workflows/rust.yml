name: Build and Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    strategy:
      matrix:
        include:
          # x86_64 Linux
          - target: x86_64-linux
            rust_target: x86_64-unknown-linux-gnu
            artifact_name: smtp2tg-x86_64-linux
            binary_name: smtp2tg

          # ARM64 Linux
          - target: arm64-linux
            rust_target: aarch64-unknown-linux-gnu
            artifact_name: smtp2tg-arm64-linux
            binary_name: smtp2tg
            cross_compile: true

          # Windows
          - target: x86_64-windows
            rust_target: x86_64-pc-windows-msvc
            artifact_name: smtp2tg-x86_64-windows
            binary_name: smtp2tg.exe
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Setup ARM64 toolchain
        if: matrix.cross_compile
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      # Linux build (including ARM64 cross-compile)
      - name: Build Linux binaries
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.cross_compile }}" = "true" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.rust_target }}
          mkdir -p release
          cp target/${{ matrix.rust_target }}/release/${{ matrix.binary_name }} release/

      # Windows build (simpler, no cross-compile needed)
      - name: Build Windows binary
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cargo build --release --target ${{ matrix.rust_target }}
          mkdir -p release
          cp target/${{ matrix.rust_target }}/release/${{ matrix.binary_name }} release/

      - name: Create checksums
        shell: bash
        run: |
          cd release
          sha256sum ${{ matrix.binary_name }} | awk '{print $1 "  " $2}' > ${{ matrix.artifact_name }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            release/${{ matrix.binary_name }}
            release/${{ matrix.artifact_name }}.sha256
          retention-days: 1

  create-release:
    # ... (rest of your workflow remains unchanged) ...
